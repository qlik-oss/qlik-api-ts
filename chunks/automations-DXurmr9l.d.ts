import { y as ApiCallOptions } from "./auth-types-CMYVHKHt.js";

//#region src/public/rest/automations.d.ts
type AutomationDetailRequestObject = {
  description?: string;
  name?: string;
  schedules?: ScheduleRequestObject[];
  spaceId?: string;
  state?: "available" | "unavailable" | "disabled";
  /** The workspace generated by the Qlik Automate editor. */
  workspace?: unknown;
};
type AutomationDetailResponseObject = {
  /** A list of connectors that were detected the workspace. This includes Connectors present in blocks which are not connected to other blocks. Order of guids is not guaranteed. */
  readonly connectorIds?: string[];
  readonly createdAt?: string;
  description?: string;
  /** A list of endpoints that were detected inside the workspace. This includes Endpoints present in blocks which are not connected to other blocks. Order of guids is not guaranteed. */
  readonly endpointIds?: string[];
  readonly executionToken?: string;
  readonly id?: string;
  lastRun?: RunDetailResponseObject;
  readonly lastRunAt?: string;
  readonly lastRunStatus?: "failed" | "finished" | "finished with warnings" | "must stop" | "not started" | "paused" | "running" | "starting" | "stopped" | "exceeded limit";
  name?: string;
  readonly ownerId?: string;
  readonly runMode?: "manual" | "scheduled" | "triggered" | "webhook";
  schedules?: ScheduleResponseObject[];
  /** A list of snippets that were detected inside the workspace. This includes snippet blocks that are not connected to other blocks. Order of guids is not guaranteed. */
  readonly snippetIds?: string[];
  readonly spaceId?: string;
  state?: "available" | "unavailable" | "disabled";
  readonly updatedAt?: string;
  /** The workspace generated by the Qlik Automate editor. */
  workspace?: unknown;
};
type AutomationDetailUpdateRequestObject = {
  description?: string;
  name?: string;
  schedules?: ScheduleRequestObject[];
  /** The workspace generated by the Qlik Automate editor. */
  workspace?: unknown;
};
type AutomationList = {
  data?: AutomationListObject[];
  links?: Links;
};
type AutomationListObject = {
  /** A list of connectors that were detected the workspace. This includes Connectors present in blocks which are not connected to other blocks. Order of guids is not guaranteed. */
  readonly connectorIds?: string[];
  readonly createdAt?: string;
  description?: string;
  /** Duration of the last run, indicated in seconds. Calculated from start and stop times */
  readonly duration?: number;
  /** A list of endpoints that were detected inside the workspace. This includes Endpoints present in blocks which are not connected to other blocks. Order of guids is not guaranteed. */
  readonly endpointIds?: string[];
  readonly executionToken?: string;
  readonly id?: string;
  lastRun?: RunDetailResponseObject;
  readonly lastRunAt?: string;
  readonly lastRunStatus?: "failed" | "finished" | "finished with warnings" | "must stop" | "not started" | "paused" | "running" | "starting" | "stopped" | "exceeded limit";
  name?: string;
  readonly ownerId?: string;
  readonly runMode?: "manual" | "scheduled" | "triggered" | "webhook";
  /** A list of snippets that were detected inside the workspace. This includes snippet blocks that are not connected to other blocks. Order of guids is not guaranteed. */
  readonly snippetIds?: string[];
  readonly spaceId?: string;
  state?: "available" | "unavailable" | "disabled";
  readonly updatedAt?: string;
  /** The workspace contains the JSON representation of the used blocks */
  readonly workspace?: unknown;
};
type AutomationUsageObject = {
  /** Duration of the last run, indicated in seconds. Calculated from start and stop times */
  duration?: number;
  /** The unique identifier for the automation. */
  guid?: string;
  /** The name for the automation. */
  name?: string;
  /** The unique identifier for the user who owns the automation */
  ownerId?: string;
};
type Error = {
  /** The unique code for the error */
  code: string;
  /** May be used to provide additional details */
  detail?: string;
  /** A summary of what went wrong */
  title: string;
};
type ErrorResponse = {
  errors?: Error[];
  /** A way to trace the source of the error. */
  traceId?: string;
};
type Links = {
  next?: PaginationLink;
  prev?: PaginationLink;
};
type PaginationLink = {
  /** The URL to a resource request */
  href?: string;
};
type RunDetailRequestObject = {
  /** The source that triggers the automation will set the context. */
  context: "api";
  readonly id?: string;
};
type RunDetailResponseObject = {
  /** The source that triggers the automation will set the context. Certain contexts impact the execution of an automation (for example, The "test_run" context will not process all results when listing items). */
  context?: "test_run" | "editor" | "detail" | "api_sync" | "api_async" | "webhook" | "lookup";
  readonly createdAt?: string;
  error?: unknown;
  readonly executedById?: string;
  readonly id?: string;
  readonly isArchived?: boolean;
  readonly isTestRun?: boolean;
  metrics?: {
    /** List of blocks used during execution. Note: this list currently only contains endpointBlocks and snippetBlocks */
    blocks?: {
      /** API calls to external resources made by the current block. */
      apiCalls?: number;
      /** Unique identifier for the connector used within the block of the execution. */
      connectorId?: string;
      /** Unique identifier for the snippet block used within the execution. */
      endpointId?: string;
      /** Total amount of received bytes sent by the current block. */
      rxBytes: number;
      /** Unique identifier for the snippet block used within the execution. */
      snippetId?: string;
      /** Total amount of sent bytes sent by the current block. */
      txBytes: number;
      /** Type of the block. */
      type: "snippetBlock" | "endpointBlock";
    }[];
    network?: {
      /** The number of received bytes. */
      rxBytes?: number;
      /** The number of received bytes. */
      txBytes?: number;
    };
    /** The number of API calls made. */
    totalApiCalls?: number;
  };
  readonly ownerId?: string;
  readonly scheduledStartTime?: string;
  readonly spaceId?: string;
  readonly startTime?: string;
  status?: "failed" | "finished" | "finished with warnings" | "must stop" | "not started" | "running" | "starting" | "stopped" | "exceeded limit" | "queued";
  readonly stopTime?: string;
  title?: string;
  readonly updatedAt?: string;
};
type RunList = {
  data?: RunListObject[];
  links?: Links;
};
type RunListObject = {
  context?: "test_run" | "editor" | "detail" | "api_sync" | "api_async" | "webhook" | "lookup";
  readonly createdAt?: string;
  /** Duration of the run, indicated in seconds. Calculated from start and stop times */
  readonly duration?: number;
  error?: unknown;
  readonly executedById?: string;
  readonly id?: string;
  readonly isArchived?: boolean;
  readonly isTestRun?: boolean;
  readonly ownerId?: string;
  readonly scheduledStartTime?: string;
  readonly spaceId?: string;
  readonly startTime?: string;
  status?: "failed" | "finished" | "finished with warnings" | "must stop" | "not started" | "running" | "starting" | "stopped" | "exceeded limit" | "queued";
  readonly stopTime?: string;
  title?: string;
  readonly updatedAt?: string;
};
type ScheduleRequestObject = {
  /** time in seconds. */
  interval?: number;
  startAt?: string;
  stopAt?: string;
  timezone?: string;
};
type ScheduleResponseObject = {
  readonly id?: string;
  /** time in seconds. */
  interval?: number;
  lastStartedAt?: string;
  startAt?: string;
  stopAt?: string;
  timezone?: string;
};
type UsageList = {
  data?: UsageObject[];
  links?: Links;
};
type UsageObject = {
  automation?: AutomationUsageObject;
  /** The date for the metric */
  date: string;
  /** The name for the metric */
  name: "runs" | "scheduledRun" | "triggeredRun" | "webhookRuns" | "duration" | "bandwidthIn" | "bandwidthOut";
  /** The value count of the metric */
  value: number;
};
/**
 * Retrieves a list of the automations that the requesting user has access to.
 * @example
 * getAutomations(
 *   {
 *     fields: "lastRun,lastRunStatus,runMode,createdAt,updatedAt"
 *   }
 * )
 *
 * @param query an object with query parameters
 * @throws GetAutomationsHttpError
 */
declare function getAutomations(query: {
  /** Allows to select the actual fields to be returned. When no fields are defined, all are returned. */
  fields?: string;
  /** Allowed filters: name, runMode, lastRunStatus, ownerId, spaceId */
  filter?: string;
  /** The number of automations to retrieve. */
  limit?: number;
  /** When true, list all automations. Restricted to tenant admins and analytics admins. */
  listAll?: boolean;
  /** The field to sort by, with +- prefix indicating sort order. (?sort=-name => sort on the name field using descending order)
   * The `duration` option is deprecated and will be removed in a future release. */
  sort?: "id" | "name" | "runMode" | "state" | "createdAt" | "updatedAt" | "lastRunAt" | "lastRunStatus" | "duration" | "+id" | "+name" | "+runMode" | "+state" | "+createdAt" | "+updatedAt" | "+lastRunAt" | "+lastRunStatus" | "-id" | "-name" | "-runMode" | "-state" | "-createdAt" | "-updatedAt" | "-lastRunAt" | "-lastRunStatus" | "+duration" | "-duration";
}, options?: ApiCallOptions): Promise<GetAutomationsHttpResponse>;
type GetAutomationsHttpResponse = {
  data: AutomationList;
  headers: Headers;
  status: 200;
  prev?: (options?: ApiCallOptions) => Promise<GetAutomationsHttpResponse>;
  next?: (options?: ApiCallOptions) => Promise<GetAutomationsHttpResponse>;
};
type GetAutomationsHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 500 | 503;
};
/**
 * Creates a new automation. The requesting user must be assigned the `AutomationCreator` role.
 *
 * @param body an object with the body content
 * @throws CreateAutomationHttpError
 */
declare function createAutomation(body: AutomationDetailRequestObject, options?: ApiCallOptions): Promise<CreateAutomationHttpResponse>;
type CreateAutomationHttpResponse = {
  data: AutomationDetailResponseObject;
  headers: Headers;
  status: 201;
};
type CreateAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 500 | 503;
};
/**
 * Retrieves paginated usage metrics for automations. The requesting user must be assigned the `TenantAdmin` role.
 *
 * @param query an object with query parameters
 * @throws GetAutomationsUsageMetricsHttpError
 */
declare function getAutomationsUsageMetrics(query: {
  /** If specified, result will be broken apart for each automation */
  breakdownBy?: string;
  /** Indicates how the metrics should be filtered using a SCIM-style expression. Available parameters:
   * - name (specify one or more enums to return specific metrics. Supported enum values: `runs`, `scheduledRun`, `triggeredRun`, `webhookRuns`, `duration`, `bandwidthIn`, `bandwidthOut`)
   * - date (return a metric for a specific date or range of dates, e.g. "2025-08-01") */
  filter: string;
}, options?: ApiCallOptions): Promise<GetAutomationsUsageMetricsHttpResponse>;
type GetAutomationsUsageMetricsHttpResponse = {
  data: UsageList;
  headers: Headers;
  status: 200;
  prev?: (options?: ApiCallOptions) => Promise<GetAutomationsUsageMetricsHttpResponse>;
  next?: (options?: ApiCallOptions) => Promise<GetAutomationsUsageMetricsHttpResponse>;
};
type GetAutomationsUsageMetricsHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 500 | 503;
};
/**
 * Deletes an automation. The requesting user must be the owner of the automation, or be assigned the `TenantAdmin` role.
 *
 * @param id The unique identifier for the automation.
 * @throws DeleteAutomationHttpError
 */
declare function deleteAutomation(id: string, options?: ApiCallOptions): Promise<DeleteAutomationHttpResponse>;
type DeleteAutomationHttpResponse = {
  data: void;
  headers: Headers;
  status: 204;
};
type DeleteAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 401 | 403 | 404 | 500 | 503;
};
/**
 * Retrieves the full definition of an automation. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param query an object with query parameters
 * @throws GetAutomationWithQueryHttpError
 */
declare function getAutomationWithQuery(id: string, query: {
  /** Allows to select the actual fields to be returned. Where the default is all fields */
  fields?: string;
}, options?: ApiCallOptions): Promise<GetAutomationWithQueryHttpResponse>;
type GetAutomationWithQueryHttpResponse = {
  data: AutomationDetailResponseObject;
  headers: Headers;
  status: 200;
};
type GetAutomationWithQueryHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Retrieves the full definition of an automation. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @throws GetAutomationHttpError
 */
declare function getAutomation(id: string, options?: ApiCallOptions): Promise<GetAutomationHttpResponse>;
type GetAutomationHttpResponse = {
  data: AutomationDetailResponseObject;
  headers: Headers;
  status: 200;
};
type GetAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Updates the full definition of an automation. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param body an object with the body content
 * @throws UpdateAutomationHttpError
 */
declare function updateAutomation(id: string, body: AutomationDetailUpdateRequestObject, options?: ApiCallOptions): Promise<UpdateAutomationHttpResponse>;
type UpdateAutomationHttpResponse = {
  data: AutomationDetailResponseObject;
  headers: Headers;
  status: 200;
};
type UpdateAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Changes the owner of an automation to another user. This action removes the history and change logs of this automation. All linked connections used in the automation are detached and not moved to the new owner.
 *
 * @param id The unique identifier for the automation.
 * @param body an object with the body content
 * @throws ChangeOwnerAutomationHttpError
 */
declare function changeOwnerAutomation(id: string, body: {
  /** The unique identifier of the new owner. */
  userId: string;
}, options?: ApiCallOptions): Promise<ChangeOwnerAutomationHttpResponse>;
type ChangeOwnerAutomationHttpResponse = {
  data: void;
  headers: Headers;
  status: 204;
};
type ChangeOwnerAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Changes the space of an automation by specifying a new space.
 *
 * @param id The unique identifier for the automation.
 * @param body an object with the body content
 * @throws ChangeSpaceAutomationHttpError
 */
declare function changeSpaceAutomation(id: string, body: {
  /** The unique identifier of the new space. */
  spaceId: string;
}, options?: ApiCallOptions): Promise<ChangeSpaceAutomationHttpResponse>;
type ChangeSpaceAutomationHttpResponse = {
  data: void;
  headers: Headers;
  status: 204;
};
type ChangeSpaceAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Duplicates an existing automation. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param body an object with the body content
 * @throws CopyAutomationHttpError
 */
declare function copyAutomation(id: string, body: {
  /** Name of the new automation. */
  name: string;
}, options?: ApiCallOptions): Promise<CopyAutomationHttpResponse>;
type CopyAutomationHttpResponse = {
  data: {
    /** The unique identifier for the automation. */
    id?: string;
  };
  headers: Headers;
  status: 201;
};
type CopyAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Disables an automation so that it cannot be run. The requesting user must be the owner of the automation, or be assigned the `TenantAdmin` role.
 *
 * @param id The unique identifier for the automation.
 * @throws DisableAutomationHttpError
 */
declare function disableAutomation(id: string, options?: ApiCallOptions): Promise<DisableAutomationHttpResponse>;
type DisableAutomationHttpResponse = {
  data: void;
  headers: Headers;
  status: 204;
};
type DisableAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Enables an automation so that it can be run. The requesting user must be the owner of the automation, or be assigned the `TenantAdmin` role.
 *
 * @param id The unique identifier for the automation.
 * @throws EnableAutomationHttpError
 */
declare function enableAutomation(id: string, options?: ApiCallOptions): Promise<EnableAutomationHttpResponse>;
type EnableAutomationHttpResponse = {
  data: void;
  headers: Headers;
  status: 204;
};
type EnableAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Changes the owner of an automation to another user. This action removes the history and change logs of this automation. All linked connections used in the automation are detached and not moved to the new owner.
 *
 * @param id The unique identifier for the automation.
 * @param body an object with the body content
 * @throws MoveAutomationHttpError
 */
declare function moveAutomation(id: string, body: {
  userId: string;
}, options?: ApiCallOptions): Promise<MoveAutomationHttpResponse>;
type MoveAutomationHttpResponse = {
  data: void;
  headers: Headers;
  status: 204;
};
type MoveAutomationHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Retrieves a list of runs for a specific automation. The requesting user must be the owner of the automation, or be assigned the `TenantAdmin` role.
 *
 * @param id The unique identifier for the automation.
 * @param query an object with query parameters
 * @throws GetAutomationRunsHttpError
 */
declare function getAutomationRuns(id: string, query: {
  /** Allows to select the actual fields to be returned. Where the default is all fields */
  fields?: string;
  /** Allowed filters: status, context, startTime and title, spaceId, ownerId, executedById */
  filter?: string;
  /** The number of runs to retrieve. */
  limit?: number;
  /** The field to sort by, with +- prefix indicating sort order. (?query=-startTime => sort on the startTime field using descending order) */
  sort?: "id" | "status" | "startTime" | "-id" | "-status" | "-startTime" | "+id" | "+status" | "+startTime";
}, options?: ApiCallOptions): Promise<GetAutomationRunsHttpResponse>;
type GetAutomationRunsHttpResponse = {
  data: RunList;
  headers: Headers;
  status: 200;
  prev?: (options?: ApiCallOptions) => Promise<GetAutomationRunsHttpResponse>;
  next?: (options?: ApiCallOptions) => Promise<GetAutomationRunsHttpResponse>;
};
type GetAutomationRunsHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Creates a runs for a specific automation. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param body an object with the body content
 * @throws QueueAutomationRunHttpError
 */
declare function queueAutomationRun(id: string, body: RunDetailRequestObject, options?: ApiCallOptions): Promise<QueueAutomationRunHttpResponse>;
type QueueAutomationRunHttpResponse = {
  data: RunDetailResponseObject;
  headers: Headers;
  status: 201;
};
type QueueAutomationRunHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Retrieves a specific run for an automation. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param runId The unique identifier for the run.
 * @param query an object with query parameters
 * @throws GetAutomationRunWithQueryHttpError
 */
declare function getAutomationRunWithQuery(id: string, runId: string, query: {
  /** Allows to select the actual fields to be returned. Where the default is all fields */
  fields?: string;
}, options?: ApiCallOptions): Promise<GetAutomationRunWithQueryHttpResponse>;
type GetAutomationRunWithQueryHttpResponse = {
  data: RunDetailResponseObject;
  headers: Headers;
  status: 200;
};
type GetAutomationRunWithQueryHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Retrieves a specific run for an automation. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param runId The unique identifier for the run.
 * @throws GetAutomationRunHttpError
 */
declare function getAutomationRun(id: string, runId: string, options?: ApiCallOptions): Promise<GetAutomationRunHttpResponse>;
type GetAutomationRunHttpResponse = {
  data: RunDetailResponseObject;
  headers: Headers;
  status: 200;
};
type GetAutomationRunHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Retrieves the URL for the debug log of a specific automation run. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param runId The unique identifier for the run.
 * @throws GetAutomationRunDetailsHttpError
 */
declare function getAutomationRunDetails(id: string, runId: string, options?: ApiCallOptions): Promise<GetAutomationRunDetailsHttpResponse>;
type GetAutomationRunDetailsHttpResponse = {
  data: {
    url?: string;
  };
  headers: Headers;
  status: 200;
};
type GetAutomationRunDetailsHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Retries a specific run by creating a new run using the same inputs. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param runId The unique identifier for the run.
 * @throws RetryAutomationRunHttpError
 */
declare function retryAutomationRun(id: string, runId: string, options?: ApiCallOptions): Promise<RetryAutomationRunHttpResponse>;
type RetryAutomationRunHttpResponse = {
  data: void;
  headers: Headers;
  status: 204;
};
type RetryAutomationRunHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Forcefully stops an automation run immediately. The requesting user must be the owner of the automation.
 *
 * @param id The unique identifier for the automation.
 * @param runId The unique identifier for the run.
 * @throws StopAutomationRunHttpError
 */
declare function stopAutomationRun(id: string, runId: string, options?: ApiCallOptions): Promise<StopAutomationRunHttpResponse>;
type StopAutomationRunHttpResponse = {
  data: void;
  headers: Headers;
  status: 204;
};
type StopAutomationRunHttpError = {
  data: ErrorResponse;
  headers: Headers;
  status: 400 | 401 | 403 | 404 | 500 | 503;
};
/**
 * Clears the cache for automations api requests.
 */
declare function clearCache(): void;
type AutomationsAPI = {
  /**
   * Retrieves a list of the automations that the requesting user has access to.
   * @example
   * getAutomations(
   *   {
   *     fields: "lastRun,lastRunStatus,runMode,createdAt,updatedAt"
   *   }
   * )
   *
   * @param query an object with query parameters
   * @throws GetAutomationsHttpError
   */
  getAutomations: typeof getAutomations;
  /**
   * Creates a new automation. The requesting user must be assigned the `AutomationCreator` role.
   *
   * @param body an object with the body content
   * @throws CreateAutomationHttpError
   */
  createAutomation: typeof createAutomation;
  /**
   * Retrieves paginated usage metrics for automations. The requesting user must be assigned the `TenantAdmin` role.
   *
   * @param query an object with query parameters
   * @throws GetAutomationsUsageMetricsHttpError
   */
  getAutomationsUsageMetrics: typeof getAutomationsUsageMetrics;
  /**
   * Deletes an automation. The requesting user must be the owner of the automation, or be assigned the `TenantAdmin` role.
   *
   * @param id The unique identifier for the automation.
   * @throws DeleteAutomationHttpError
   */
  deleteAutomation: typeof deleteAutomation;
  /**
   * Retrieves the full definition of an automation. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param query an object with query parameters
   * @throws GetAutomationWithQueryHttpError
   */
  getAutomationWithQuery: typeof getAutomationWithQuery;
  /**
   * Retrieves the full definition of an automation. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @throws GetAutomationHttpError
   */
  getAutomation: typeof getAutomation;
  /**
   * Updates the full definition of an automation. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param body an object with the body content
   * @throws UpdateAutomationHttpError
   */
  updateAutomation: typeof updateAutomation;
  /**
   * Changes the owner of an automation to another user. This action removes the history and change logs of this automation. All linked connections used in the automation are detached and not moved to the new owner.
   *
   * @param id The unique identifier for the automation.
   * @param body an object with the body content
   * @throws ChangeOwnerAutomationHttpError
   */
  changeOwnerAutomation: typeof changeOwnerAutomation;
  /**
   * Changes the space of an automation by specifying a new space.
   *
   * @param id The unique identifier for the automation.
   * @param body an object with the body content
   * @throws ChangeSpaceAutomationHttpError
   */
  changeSpaceAutomation: typeof changeSpaceAutomation;
  /**
   * Duplicates an existing automation. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param body an object with the body content
   * @throws CopyAutomationHttpError
   */
  copyAutomation: typeof copyAutomation;
  /**
   * Disables an automation so that it cannot be run. The requesting user must be the owner of the automation, or be assigned the `TenantAdmin` role.
   *
   * @param id The unique identifier for the automation.
   * @throws DisableAutomationHttpError
   */
  disableAutomation: typeof disableAutomation;
  /**
   * Enables an automation so that it can be run. The requesting user must be the owner of the automation, or be assigned the `TenantAdmin` role.
   *
   * @param id The unique identifier for the automation.
   * @throws EnableAutomationHttpError
   */
  enableAutomation: typeof enableAutomation;
  /**
   * Changes the owner of an automation to another user. This action removes the history and change logs of this automation. All linked connections used in the automation are detached and not moved to the new owner.
   *
   * @param id The unique identifier for the automation.
   * @param body an object with the body content
   * @throws MoveAutomationHttpError
   */
  moveAutomation: typeof moveAutomation;
  /**
   * Retrieves a list of runs for a specific automation. The requesting user must be the owner of the automation, or be assigned the `TenantAdmin` role.
   *
   * @param id The unique identifier for the automation.
   * @param query an object with query parameters
   * @throws GetAutomationRunsHttpError
   */
  getAutomationRuns: typeof getAutomationRuns;
  /**
   * Creates a runs for a specific automation. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param body an object with the body content
   * @throws QueueAutomationRunHttpError
   */
  queueAutomationRun: typeof queueAutomationRun;
  /**
   * Retrieves a specific run for an automation. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param runId The unique identifier for the run.
   * @param query an object with query parameters
   * @throws GetAutomationRunWithQueryHttpError
   */
  getAutomationRunWithQuery: typeof getAutomationRunWithQuery;
  /**
   * Retrieves a specific run for an automation. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param runId The unique identifier for the run.
   * @throws GetAutomationRunHttpError
   */
  getAutomationRun: typeof getAutomationRun;
  /**
   * Retrieves the URL for the debug log of a specific automation run. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param runId The unique identifier for the run.
   * @throws GetAutomationRunDetailsHttpError
   */
  getAutomationRunDetails: typeof getAutomationRunDetails;
  /**
   * Retries a specific run by creating a new run using the same inputs. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param runId The unique identifier for the run.
   * @throws RetryAutomationRunHttpError
   */
  retryAutomationRun: typeof retryAutomationRun;
  /**
   * Forcefully stops an automation run immediately. The requesting user must be the owner of the automation.
   *
   * @param id The unique identifier for the automation.
   * @param runId The unique identifier for the run.
   * @throws StopAutomationRunHttpError
   */
  stopAutomationRun: typeof stopAutomationRun;
  /**
   * Clears the cache for automations api requests.
   */
  clearCache: typeof clearCache;
};
/**
 * Functions for the automations api
 */
declare const automationsExport: AutomationsAPI;
//#endregion
export { ScheduleResponseObject as $, GetAutomationRunWithQueryHttpError as A, Links as B, ErrorResponse as C, moveAutomation as Ct, GetAutomationRunDetailsHttpResponse as D, updateAutomation as Dt, GetAutomationRunDetailsHttpError as E, stopAutomationRun as Et, GetAutomationWithQueryHttpResponse as F, QueueAutomationRunHttpResponse as G, MoveAutomationHttpResponse as H, GetAutomationsHttpError as I, RunDetailRequestObject as J, RetryAutomationRunHttpError as K, GetAutomationsHttpResponse as L, GetAutomationRunsHttpError as M, GetAutomationRunsHttpResponse as N, GetAutomationRunHttpError as O, GetAutomationWithQueryHttpError as P, ScheduleRequestObject as Q, GetAutomationsUsageMetricsHttpError as R, Error as S, getAutomationsUsageMetrics as St, GetAutomationHttpResponse as T, retryAutomationRun as Tt, PaginationLink as U, MoveAutomationHttpError as V, QueueAutomationRunHttpError as W, RunList as X, RunDetailResponseObject as Y, RunListObject as Z, DeleteAutomationHttpResponse as _, getAutomationRunDetails as _t, AutomationListObject as a, UsageObject as at, EnableAutomationHttpError as b, getAutomationWithQuery as bt, ChangeOwnerAutomationHttpError as c, changeSpaceAutomation as ct, ChangeSpaceAutomationHttpResponse as d, createAutomation as dt, StopAutomationRunHttpError as et, CopyAutomationHttpError as f, deleteAutomation as ft, DeleteAutomationHttpError as g, getAutomationRun as gt, CreateAutomationHttpResponse as h, getAutomation as ht, AutomationList as i, UsageList as it, GetAutomationRunWithQueryHttpResponse as j, GetAutomationRunHttpResponse as k, ChangeOwnerAutomationHttpResponse as l, clearCache as lt, CreateAutomationHttpError as m, enableAutomation as mt, AutomationDetailResponseObject as n, UpdateAutomationHttpError as nt, AutomationUsageObject as o, automationsExport as ot, CopyAutomationHttpResponse as p, disableAutomation as pt, RetryAutomationRunHttpResponse as q, AutomationDetailUpdateRequestObject as r, UpdateAutomationHttpResponse as rt, AutomationsAPI as s, changeOwnerAutomation as st, AutomationDetailRequestObject as t, StopAutomationRunHttpResponse as tt, ChangeSpaceAutomationHttpError as u, copyAutomation as ut, DisableAutomationHttpError as v, getAutomationRunWithQuery as vt, GetAutomationHttpError as w, queueAutomationRun as wt, EnableAutomationHttpResponse as x, getAutomations as xt, DisableAutomationHttpResponse as y, getAutomationRuns as yt, GetAutomationsUsageMetricsHttpResponse as z };